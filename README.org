#+title: HEmacs
#+author: Will Medrano

* Introduction

An Emacs configuration for VIM users.

[[file:screenshot.png]]

To install:

1. Clone the config from the home directory with:

#+begin_src
cd
git clone https://github.com/wmedrano/hemacs .emacs.d
#+end_src

2. Startup and press ~M-x package-refresh-contents~. Note that ~M-x~ is ~Alt+x~. ~M~
   is essentially ~Alt~.
3. Press ~M-x package-install-selected-packages~
4. Optional: Press ~M-x nerd-icons-install-fonts~ for better icons in GUI mode.
5. Restart Emacs.

For the initial trial period, you may notice some noisy messages caused by Emacs
byte compiling packages for the first time.

** Tips

1. =C-g= is the =Ctrl+Alt+Del= of Emacs. Mashing this usually quits you out of
   any nested function calls.
2. Mostly everything is tweakable. Make any feature request.
3. Emacs in GUI mode has a bit more features than terminal mode. For example, it
   can display images which is useful for things like Markdown preview.
4. Emacs interactive functions are accessed through the =M-x= key where =M= is
=Alt=. Some useful functions (that can be mapped to keys if desired) are:

#+begin_src emacs-lisp :exports results
  (let (
        (make-row (lambda (fn)
                    (if (stringp fn) `(,fn "")
                      (list fn (ivy-rich-counsel-function-docstring fn)))
                    ))
        (functions `(
                     "*Basic*"
                     ,#'find-file
                     ,#'counsel-find-file
                     ,#'counsel-switch-buffer
                     ,#'kill-buffer
                     ,#'hm-find-file-in-chrome
                     ,#'hm-focus
                     "*Project*"
                     ,#'project-find-file
                     ,#'project-display-buffer
                     ,#'project-compile
                     ,#'project-find-regex
                     "*Editing*"
                     ,#'sort-lines
                     ,#'ivy-emoji
                     "*Searching*"
                     ,#'swiper
                     ,#'swiper-all
                     ,#'counsel-rg
                     "*Smart Stuff*"
                     ,#'eldoc
                     ,#'eldoc-display-in-buffer
                     ,#'eglot-format-buffer
                     ,#'eglot-code-actions
                     ,#'eglot-rename
                     ,#'xref-find-definitions
                     ,#'xref-find-references
                     ,#'flymake-show-buffer-diagnostics
                     ,#'flymake-show-project-diagnostics
                     ,#'flymake-goto-next-error
                     ,#'flymake-goto-prev-error
                     "*Help*"
                     ,#'counsel-describe-function
                     ,#'counsel-describe-variable
                     ,#'describe-key
                     )))
    (mapcar make-row  functions))
#+end_src

#+RESULTS:
| *Basic*                          |                                                                              |
| find-file                        | Edit file FILENAME.                                                          |
| counsel-find-file                | Forward to ‘find-file’.                                                      |
| counsel-switch-buffer            | Switch to another buffer.                                                    |
| kill-buffer                      | Kill the buffer specified by BUFFER-OR-NAME.                                 |
| hm-find-file-in-chrome           | Open FILE in Chrome.                                                         |
| hm-focus                         | Helps you focus.                                                             |
| *Project*                        |                                                                              |
| project-find-file                | Visit a file (with completion) in the current project.                       |
| project-display-buffer           | Display BUFFER-OR-NAME in some window, without selecting it.                 |
| project-compile                  | Run ‘compile’ in the project root.                                           |
| project-find-regex               |                                                                              |
| *Editing*                        |                                                                              |
| sort-lines                       | Sort lines in region alphabetically; REVERSE non-nil means descending order. |
| ivy-emoji                        | Select an emoji and insert it.                                               |
| *Searching*                      |                                                                              |
| swiper                           | ‘isearch-forward’ with an overview.                                          |
| swiper-all                       | Run ‘swiper’ for all open buffers.                                           |
| counsel-rg                       | Grep for a string in the current directory using ‘rg’.                       |
| *Smart Stuff*                    |                                                                              |
| eldoc                            | Document thing at point.                                                     |
| eldoc-display-in-buffer          | Display DOCS in a dedicated buffer.                                          |
| eglot-format-buffer              | Format contents of current buffer.                                           |
| eglot-code-actions               | Find LSP code actions of type ACTION-KIND between BEG and END.               |
| eglot-rename                     | Rename the current symbol to NEWNAME.                                        |
| xref-find-definitions            | Find the definition of the identifier at point.                              |
| xref-find-references             | Find references to the identifier at point.                                  |
| flymake-show-buffer-diagnostics  | Show a list of Flymake diagnostics for current buffer.                       |
| flymake-show-project-diagnostics | Show a list of Flymake diagnostics for the current project.                  |
| flymake-goto-next-error          | Go to Nth next Flymake diagnostic that matches FILTER.                       |
| flymake-goto-prev-error          | Go to Nth previous Flymake diagnostic that matches FILTER.                   |
| *Help*                           |                                                                              |
| counsel-describe-function        | Forward to ‘describe-function’.                                              |
| counsel-describe-variable        | Forward to ‘describe-variable’.                                              |
| describe-key                     | Display documentation of the function invoked by KEY-LIST.                   |

*Note*: =counsel-rg= requires installing ripgrep.

** Dependencies

#+begin_src emacs-lisp :tangle init.el :comments both :results silent
  (custom-set-variables
   '(package-selected-packages
     '(auto-highlight-symbol-mode evil-anzu ivy-emoji htmlize markdown-mode diff-hl company rust-mode which-key magit doom-modeline nerd-icons-ivy-rich ivy-rich counsel ivy typescript-mode eglot atom-one-dark-theme evil yaml-mode)))
#+end_src

** Fonts

For icons in the terminal, install a Nerd Font and set it as the terminal's
font. Nerd fonts are normal fonts patched to have
icons. https://www.nerdfonts.com/font-downloads. To get the font to apply in GUI
mode, it must also be set as the default font. This can be edited in the
custom-set-faces variable. The default value is "JetBrainsMono Nerd Font" which
works fine if you downloaded and installed the "JetBrainsMono Nerd Font"

#+begin_src emacs-lisp :tangle init.el :comments both :results silent
  (custom-set-faces
    ;; custom-set-faces was added by Custom.
    ;; If you edit it by hand, you could mess it up, so be careful.
    ;; Your init file should contain only one such instance.
    ;; If there is more than one, they won't work right.
   '(default ((t (:family "JetBrainsMono Nerd Font" :foundry "JB" :slant normal :weight normal :height 120 :width normal)))))
#+end_src

** Package Manager

We point our package manager to [[https://melpa.org]]. Melpa contains lots of useful
packages.

#+begin_src emacs-lisp :tangle init.el :comments both :results silent
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (package-initialize)
#+end_src

** Help

Which key is used to display a popup of valid keys after a prefix and the
functions that they run.

To view documentation for a function, use the Emacs built-in keybinding "C-h
f" to jump to the documentation for a function and "C-h v" to jump to the
documentation for a variable.

#+begin_src emacs-lisp :tangle init.el :comments both :results silent
  (require 'which-key)
  (which-key-mode t)
#+end_src

If you want to know what a specific key does:

1. Run =M-x describe-key= or press =C-h k=.
2. Press the keys that you want to know about, for example =gd= in normal state.
3. This will open a buffer display the documentation. The documentation contains
   the Emacs keymap and key that was pressed, the function that is run, and
   links to the function implementation. For example, =gd= will display:

#+begin_example
g d runs the command evil-goto-definition (found in evil-motion-state-map),
which is an interactive native compiled Lisp function in ‘evil-commands.el’.

It is bound to g d.

(evil-goto-definition)

Go to definition or first occurrence of symbol under point.
See also ‘evil-goto-definition-functions’.
#+end_example

* Theming

For theming we use atom dark theme. For the modeline we use doom since it
looks pretty. We also remove some very retro stuff and add some basics like
the line number.

#+begin_src emacs-lisp :tangle init.el :comments both :results silent
  (require 'atom-one-dark-theme)
  (require 'doom-modeline)
  (setq-default
  ;; Don't show retro startup screen.
  inhibit-startup-screen t
  ;; Don't show buffer encoding. For example "UTF-8".
  doom-modeline-buffer-encoding nil
  ;; Show mini-scrollbar in far left-most space of modeline.
  doom-modeline-hud t)
  (load-theme 'atom-one-dark t)
  (doom-modeline-mode t)

  (setq-default display-line-numbers-grow-only t)
  (global-display-line-numbers-mode t)
  (global-hl-line-mode t)
  (column-number-mode t)
#+end_src

* Keybindings

** VIM

For keybindings we use evil to provide a VIM like experience. We also add
additional keybindings that are similar to VSCode. To learn what a function
does, use "C-h f". For example: "C-h f eglot-code-actions RET" will show
documentation for the function eglot-code-actions.

#+begin_src emacs-lisp :tangle init.el :comments both :results silent
  ;; Usually we require first but evil needs to know some of the variables at init
  ;; time.
  (setq-default evil-want-C-u-scroll t)
  (require 'evil)
  (require 'evil-anzu)
  (require 'anzu)
  (evil-mode t)
  (global-anzu-mode t);; To show number of search matches in modeline.
#+end_src

*** Motion State

Evil motion state is similar to normal state but does not allow entering insert
mode.

#+begin_src emacs-lisp :tangle init.el :comments both :results silent
  (add-to-list 'evil-motion-state-modes 'dired-mode)
  (add-to-list 'evil-motion-state-modes 'magit-diff-mode)
  (add-to-list 'evil-motion-state-modes 'magit-status-mode)
  (add-to-list 'evil-motion-state-modes 'special-mode)

  (defun hm-evil-define-normal-key-only (key fn)
    "Maps KEY to FN, but only in normal mode.

  Motion state will be unbounded."
    (define-key evil-motion-state-map key nil)
    (define-key evil-normal-state-map key fn))
  (hm-evil-define-normal-key-only (kbd "RET") #'evil-ret)
#+end_src

** VSCode

The below are taken from VSCode.

#+begin_src emacs-lisp :tangle init.el :comments both :results silent
  (require 'eglot)
  (context-menu-mode t)  ;; Enables right clicking in GUI mode.
  (define-key eglot-mode-map   (kbd "C-.")     #'eglot-code-actions)
  (define-key eglot-mode-map   (kbd "<f2>")    #'eglot-rename)
  (define-key flymake-mode-map (kbd "<f8>")    #'flymake-goto-next-error)
  (define-key flymake-mode-map (kbd "S-<f8>")  #'flymake-goto-prev-error)
  (define-key eglot-mode-map   (kbd "<f12>")   #'xref-find-definitions)
  (define-key eglot-mode-map   (kbd "S-<f12>") #'xref-find-references)
  ;; Emacs links C-SPC and C-@ so we have to set both.
  (evil-define-key 'insert company-mode-map (kbd "C-@")   #'company-complete)
  (evil-define-key 'insert company-mode-map (kbd "C-SPC") #'company-complete)
#+end_src

For some reason, visual-line-mode + disabling truncate lines helps smooth scrolling.

#+begin_src emacs-lisp :tangle init.el :comments both :results silent
  (global-visual-line-mode t)
  (toggle-truncate-lines 1)
  (setq-default scroll-conservatively 100)
#+end_src

** Editing

#+begin_src emacs-lisp :tangle init.el :comments both :results silent
  (setq-default
   indent-tabs-mode nil
   fill-column 80
   ;; TODO: Consider changing the default tab width.
   tab-width 2)
  (add-hook 'text-mode-hook #'auto-fill-mode)
  (add-hook 'prog-mode-hook #'auto-fill-mode)
  (add-hook 'prog-mode-hook #'auto-highlight-symbol-mode)
  (add-hook 'before-save-hook #'delete-trailing-whitespace)
#+end_src

* Files

#+begin_src emacs-lisp :tangle init.el :comments both :results silent
  (setq-default
   backup-inhibited t
   ring-bell-function 'ignore)
  (auto-save-mode nil)
  (global-auto-revert-mode t)
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
#+end_src

* IDE Features

IDE features are powered by Eglot. Eglot interacts with LSP servers. Although
Eglot interacts with LSP servers, it delegates the frontend to other
packages. Those packages are:

- Eldoc for displaying documentation for the current symbol in the echo area.
- Flymake for displaying syntax errors.
- Company for displaying and selecting code completions.
- xref for jumping to definitions and references.

#+begin_src emacs-lisp :tangle init.el :comments both :results silent
  (require 'eglot)    ;; Most of the "IDE" stuff.
  (require 'company)  ;; Autocompletion frontend.
  (global-company-mode t)
#+end_src

** Emacs Lisp

#+begin_src emacs-lisp :tangle init.el :comments both :results silent
  (defun set-up-emacs-lisp-mode ()
    "Set up Emacs Lisp mode."
    (dolist (path load-path)
      (add-to-list 'elisp-flymake-byte-compile-load-path path)))
  (add-hook 'emacs-lisp-mode-hook #'set-up-emacs-lisp-mode)
#+end_src

** Rust

#+begin_src emacs-lisp :tangle init.el :comments both :results silent
  (defun set-up-rust-mode ()
    "Set up Rust mode."
    (eglot-ensure)
    (add-hook 'before-save-hook #'eglot-format-buffer nil t))
  (add-hook 'rust-mode-hook #'set-up-rust-mode)
#+end_src

** TypeScript

#+begin_src emacs-lisp :tangle init.el :comments both :results silent
  (defun set-up-typescript-mode ()
    "Set up TypeScript mode."
    (eglot-ensure)
    (add-hook 'before-save-hook #'eglot-format-buffer nil t))
  (add-hook 'typescript-mode-hook #'set-up-typescript-mode)
#+end_src

* Completions

Note: This refers to completions within Emacs, and not within code. Completions
within Emacs involves things like selecting a file or buffer.

#+begin_src emacs-lisp :tangle init.el :comments both :results silent
  (require 'counsel)
  (require 'ivy)
  (ivy-mode t)
  (counsel-mode t)
   ;; Counsel does not set this one by default.
  (global-set-key (kbd "C-x b") #'counsel-switch-buffer)
#+end_src

We use some "ivy rich" modes to apply better styling to some of the completion
functions. This includes things like adding icons, file size information, and
inline documentation.

#+begin_src emacs-lisp :tangle init.el :comments both :results silent
  (require 'ivy-rich)
  (require 'nerd-icons-ivy-rich)
  ;; Since we initialize some rich variables later in the file, we must defer
  ;; enabling the modes.
  (add-hook 'after-init-hook #'ivy-rich-mode)
  (add-hook 'after-init-hook #'nerd-icons-ivy-rich-mode)
#+end_src

* Version Control

#+begin_src emacs-lisp :tangle init.el :comments both :results silent
  (require 'diff-hl)
  (defun set-up-diff-hl-mode ()
    "Set up diff hl.

  Diff HL provides the state (+/-/modified) to the left of the line numbers."
    (diff-hl-flydiff-mode t)
     ;; Margin mode should usually be enabled for terminal. GUI mode automatically
     ;; uses the special "fringe" to display the information.
    (unless (display-graphic-p)
      (diff-hl-margin-mode t)))
  (add-hook 'diff-hl-mode-hook #'set-up-diff-hl-mode)
  (global-diff-hl-mode t)
#+end_src

** TODO Git

The =magit= package provides Git commands from within Emacs. People seem to
really like it so consider adding a section for it.

* Utils

Some custom utilities. Functions that are labeled `(interactive)` can be run
with "M-x <name-of-function>"

** Focus

#+begin_src emacs-lisp :tangle init.el :comments both :results silent
  (defun hm-focus ()
    "Helps you focus."
    (interactive)
    (message "Focus! Your dad's here."))
#+end_src

** Open File In Chrome

~hm-find-file-in-chrome~ prompts for a file and opens it in chrome.

#+begin_src emacs-lisp :tangle init.el :comments both :results silent
  (defun hm-clone-ivy-display-transformers (src dst)
    "Applies ivy completion styling from function SRC to function DST.

  Note: This must be run before the rich modes are enabled."
    (setq ivy-rich-display-transformers-list
          (plist-put
           ivy-rich-display-transformers-list dst
           (plist-get ivy-rich-display-transformers-list src)))
    (setq nerd-icons-ivy-rich-display-transformers-list
          (plist-put
           nerd-icons-ivy-rich-display-transformers-list dst
           (plist-get nerd-icons-ivy-rich-display-transformers-list src))))

  (defun hm-find-file-in-chrome ()
    "Prompt for a file and open it in Chrome."
    (interactive)
    (counsel--find-file-1 "Open in chrome: " nil #'browse-url-chrome 'hm-find-file-in-chrome))
  (hm-clone-ivy-display-transformers 'counsel-find-file 'hm-find-file-in-chrome)
#+end_src

* End

Required to signal that this file is providing the ~'init~ package.

#+begin_src emacs-lisp :tangle init.el :comments both :results silent
  (provide 'init)
  ;;; init.el ends here
#+end_src
